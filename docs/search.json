[
  {
    "objectID": "principal/posts/2021-09-19-problema+de+las+n+reinas/index.html",
    "href": "principal/posts/2021-09-19-problema+de+las+n+reinas/index.html",
    "title": "Problema de las n - reinas",
    "section": "",
    "text": "El problema de las reinas de ajedrez o mejor conocido como el de las \\(n\\) - reinas, consiste en poner \\(n\\) reinas en un tablero de ajedrez de dimensión \\(n\\times n\\) casillas (un grilla o matriz cuadrada) de tal manera que ninguna reina pueda “capturar” a otra (una reina puede capturar a otra si se encuentra en su misma fila, columna o diagonal). Por ende, la finalidad de problema es encontrar la (s) distribución (es) de las \\(n\\) reinas en el tablero.\nSe aborda el problema bajo la perspectiva de búsqueda con un enfoque desinformado, es decir, no conocemos característica alguna de la solución (estado final). Esto implica, que debemos usar las condiciones descritas en problema para poder evaluar si una solución a proponer es factible.\nA continuación se da a conocer dos opciones posibles para solucionar este problema. Sin embargo,"
  },
  {
    "objectID": "principal/posts/2021-09-19-problema+de+las+n+reinas/index.html#opción-1",
    "href": "principal/posts/2021-09-19-problema+de+las+n+reinas/index.html#opción-1",
    "title": "Problema de las n - reinas",
    "section": "Opción 1",
    "text": "Opción 1\nEste enfoque evalúa los caminos uno a uno, hasta determinar si constituyen una posible solución. En primer lugar, se declara la función para definir la cantidad de reinas que se desean colocar en el tablero.\n\nopcion1 = function(){\n  \n  reinas = as.integer(readline(\"Número de reinas: \"))\n\nA continuación, se define una función que evalúa si una reina dada las condiciones de “captura”. En los parámetros de la función se pide el tablero aux.square (con las reinas ya colocadas), la fila i, la columna j en donde se desea colocar una reina, y el valor de la reina (se considera 1 como el valor que representan a una reina en la casilla \\(i,j\\), por defecto las casillas el tablero son 0).\n\n  possible = function(aux.square,i,j,valor){\n\nLuego, se asigna a la casilla candidata de posible posición el valor de 1 (no hay otra opción), además se crean las variables de aux.col y aux.row, las cuales determinan si el aux.square cumple con el requisito de que las reinas no se capturen en las filas y columnas. Este requisito se determina calculando la suma de de las filas y columnas, ya que al estar compuesto por ceros y unos, un valor superior a 1 indica que el criterio no se cumple.\n\n    aux.square[i,j] = valor\n\n    aux.col = apply(aux.square, 2, FUN = function(colum){\n      if(sum(colum) &lt;= 1) return(TRUE)\n      else return(FALSE)\n    })\n    aux.col = ifelse(sum(!aux.col) == 0, TRUE, FALSE)\n    \n    aux.row = apply(aux.square, 1, FUN = function(rows){\n      if(sum(rows) &lt;= 1) return(TRUE)\n      else return(FALSE)\n    })\n    aux.row = ifelse(sum(!aux.row) == 0, TRUE, FALSE)\n\nDel mismo modo, se desea determinar las sumas en las diagonales del tablero (no es necesario considerar una diagonal de 1 casilla, pero de todas formas no afecta el procedimiento del script). La variable diag.principales guarda el valor de verdadero o falso respecto a la suma de las casillas de las diagonales principales (al igual que las filas y columnas, estas no deben sumar más de 1).\n\n    diag.principales = c(0,0)\n    \n    for (i in 1:queens) {\n      diag.principales[1] = sum(diag.principales[1],aux.square[i,i])\n      diag.principales[2] = sum(diag.principales[2],aux.square[i,(queens - i + 1)])\n    }\n    \n    diag.principales = ifelse(diag.principales &lt;= 1, TRUE, FALSE)\n    diag.principales = ifelse(sum(diag.principales) == 2, TRUE, FALSE)\n\nPara las “diagonales secundarias” (corresponden a todas las diagonales que se pueda formar y que no sean las principales) es posible determinarlas a partir de casillas de la primer fila de la matriz, sin considerar los extremos, ya que como se comentó, no es necesario considerar las diagonales compuestas por una casillas (esquinas).\nLos casillas de la primera fila que permite determinar todas las diagonales secundarias se guardará en la variable key.points.\n\n    key.points = matrix(c(rep(1,(queens - 2)), seq(2,(queens - 1))),\n                        ncol = 2, nrow = (queens - 2))\n\nLa función diags() que determina las diagonales secundarias y verifica las sumas de estas mediante la función suma.diag(). La función suma.diag() recibe como argumento las diagonales secundarias y retorna si es verdadero o falso que la suma de las casillas de las componen es menor o igual a 1.\nPor otro lado, la variable report.diag guarda los valores de las diagonales que se generan a partir de los key.points. La relación de como se determinan estás casillas, está expresada en las variables first.diag, second.diag, third.diag y fourth.diag.\nLuego la variable aux.sumas guarda los los resultados de la función suma.diag() ya mencionada, cuando recibe de argumento la variable report.diag.\n\n    diags = function(aux.key.points){\n      \n      suma.diag = function(M){\n        x = M[1,]; y = M[2,]\n         # Puntos entre los extremos de las diagonales, \n         # se obtiene restando las coordenadas de fila y sumando (1,1)\n        n = abs(y[1] -  x[1]) - 1\n        suma = aux.square[x[1],x[2]] + aux.square[y[1],y[2]]\n        if(n &gt;0){\n          for (i in 1:n) {\n            if(x[1] &lt; y[1] & x[2] &gt; y[2]) suma = suma + aux.square[(x[1]+i),(x[2]-i)]\n            if(x[1] &lt; y[1] & x[2] &lt; y[2]) suma = suma + aux.square[(x[1]+i),(x[2]+i)]\n            if(x[1] &gt; y[1] & x[2] &lt; y[2]) suma = suma + aux.square[(x[1]-i),(x[2]+i)]\n            if(x[1] &gt; y[1] & x[2] &gt; y[2]) suma = suma + aux.square[(x[1]-i),(x[2]-i)]\n          }\n        }\n        if(suma &lt;= 1) return(TRUE)\n        else return(FALSE)\n      }\n      \n      report.diag = list()\n      \n      # Se recorre la matriz de puntos claves, por cada uno\n      # se busca las diagonales que se generan\n      for (i in 1:dim(aux.key.points)[1]) { \n        \n        first.diag = rbind(aux.key.points[i,],c(aux.key.points[i,2],aux.key.points[i,1]))\n        second.diag = rbind(first.diag[2,], first.diag[2,] + c(1,1)*(queens - aux.key.points[i,2]))\n        third.diag = rbind(second.diag[2,], c(second.diag[2,2],second.diag[2,1])) \n        fourth.diag = rbind(third.diag[2,], first.diag[1,])\n        \n        aux.diags = list(first.diag, second.diag,third.diag, fourth.diag)\n        aux.sumas = lapply(aux.diags, function(x){ \n          return(suma.diag(x))\n        })\n        report.diag[[i]] = unlist(aux.sumas)\n      }\n      return(report.diag)\n    }\n\nEl resultado de la función diags() se guarda en la variable diag.secundarias, que finalmente contiene la suma de cada diagonal secundaria, para luego verificar que en cada una de ellas se cumple el criterio de que no sea mayor a 1, es decir que las reinas no se captura entre si.\n\n    diag.secundarias = diags(key.points)\n    diag.secundarias = ifelse(sum(!unlist(diag.secundarias)) == 0, TRUE, FALSE)\n\nLos criterios sobre las diagonales son unificados como una único resultado en la variable diagonales. En este punto finaliza la función possible(), retornando un valor de verdadero o falso sobre el cumplimiento de los criterios (filas, columnas y diagonales).\n\n    diagonales = ifelse(diag.principales == TRUE & diag.secundarias == TRUE, TRUE, FALSE)\n    \n    # Verificación en conjunto\n    if(aux.col == TRUE & aux.row == TRUE & diagonales == TRUE) return(TRUE) \n    else return(FALSE)\n    \n  }\n\nPara finalizar, se declara la función solve() (recursiva), la cual evalúa en orden las casillas del tablero (por fila de izquierda a derecha) determinando si son posiciones admisibles para una solución. De este modo, la función sigue en proceso hasta verificar que la cantidad de reinas en el tablero es \\(n\\). Además, no se detiene al encontrar una única solución, sino que determina todas las soluciones posibles y las guarda en las variable soluciones.\n\n  solve = function(board){\n      for (i in 1:queens) {\n        for (j in 1:queens) {\n          if(board[i,j] == 0){\n            if(possible(board,i,j,1)){ # Posición admisible\n              board[i,j] = 1\n              if(sum(board) == queens){ # Criterio de solución\n                solutions[[length(soluciones)+1]] &lt;&lt;- board\n                break()\n              }\n              solve(board) # Criterio recursivo\n              board[i,j] = 0\n            }\n          }\n        }\n      # Criterio de no admisibilidad\n      if(sum(board[i,]) == 0) return()\n    }\n  }\n\nsoluciones = list()\nsquare = matrix(0,ncol = queens, nrow = queens)\nsolve(square)\n\nprint(paste(\"All solutions: \",length(soluciones)))\nreturn(soluciones)\n\n}\n\nAl inicio comentamos que la búsqueda es en profundidad, esto se debe a que la función solve() evalúa las posiciones de las reinas, según se recorren los ciclos for, de este modo, las posibles soluciones finales se recorren 1 a 1 en cada iteración.\nPara ejemplificar, evaluemos el problema con 5 reinas.\n\n# Omití el argumento interactivo (readLine), para efectos del ejemplo\nr1 = opcion1(5) # Imprime el total de soluciones encontradas\n## [1] \"Cantidad de soluciones:  10\"\nr1[1] # La primera solución obtenida\n## [[1]]\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    0    0    0    0\n## [2,]    0    0    1    0    0\n## [3,]    0    0    0    0    1\n## [4,]    0    1    0    0    0\n## [5,]    0    0    0    1    0\n\nComo se puede aprecia, la solución muestra la distribución de las reinas en el tablero, en la cual, el 1 indica la presencia de una reina y el 0 la ausencia."
  },
  {
    "objectID": "principal/posts/2021-09-19-problema+de+las+n+reinas/index.html#opción-2",
    "href": "principal/posts/2021-09-19-problema+de+las+n+reinas/index.html#opción-2",
    "title": "Problema de las n - reinas",
    "section": "Opción 2",
    "text": "Opción 2\nEn primer lugar, se declara la función para definir la cantidad de reinas que se desean colocar en el tablero.\n\noption2 = function(){\n\n  n = as.integer(readline(\"Número de reinas?: \"))\n  solutions = list()\n\nLuego, a diferencia de la opción 1 se tiene una única función (Reinas()), más breve, que determina las posiciones de las reinas. Para ello, se trabaja con la siguiente propiedad: “se considera como solución un vector que contenga la posición de cada reina en una determinada columna, siendo la posición en el vector la fila que le corresponde a dicha reina”.\nEl argumento que nos permite deducir esto lo puedes encontrar en estos apuntes. En el fondo, se recurre al hecho de que las soluciones pueden ordenarse convenientemente en un vector, esto permite que sea más fácil evaluar los distintas posibles soluciones.\nVolviendo a la función Reinas(), la variable diags guarda las casillas correspondientes a la proyección de las diagonales desde una fila a otra (ejemplo: desde la fila 1 y 2, a la fila 3), esto “genera” casillas que están fuera de la matriz, pero las cuales son eliminadas en la variable posibles.columnas que guarda las casillas en donde es admisible la posición de una reina. Esto permite resumir el problema a una “proyección de diagonales”, eliminando los criterios de filas y columnas (genial!).\nFinalmente se hace uso de la recursividad mediante la función apply(). El resto de código imprime la cantidad total de soluciones y guarda las soluciones en forma matricial.\n\n  Reinas = function(posiciones) {\n    \n    # Imprime la solución al momento de obtener 8 posiciones\n    # que cumplen las condiciones\n    if (length(posiciones) == n) {\n      soluciones[[length(soluciones)+1]] &lt;&lt;- posiciones\n    }\n    \n    # Se definen las columnas posibles en donde puede ir una reina\n    posibles.columnas = setdiff(1:n, posiciones)\n    \n    # Se definen las diagonales matriciales en donde no puede ir una reina\n    out.diags = seq(length(posiciones), 1)\n    diags = c(posiciones + out.diags, posiciones - out.diags)\n    diags = diags[diags &gt;= 1 & diags &lt;= n]\n    \n    # Se eliminan las casillas diagonales, de las casillas posibles\n    # en donde ubicar a una reina\n    posibles.columnas = setdiff(posibles.columnas, diags)\n    \n    # Para cada posibilidad se evalúa nuevamente la función\n    if(length(posibles.columnas &gt; 0)){\n      apply(matrix(posibles.columnas), 1, FUN = function(p){\n        Reinas(c(posiciones,p)) # Se añaden las opciones\n                                # posibles a cada iteración\n      })\n    }\n  }\n  \n  Reinas(c())\n  \n  # Se imprime la cantidad de soluciones posibles\n  print(paste(\"Cantidad de soluciones: \",length(soluciones)))\n\n  # Se transforman las soluciones en matrices\n  soluciones = lapply(soluciones, function(sol){\n    M = matrix(0, ncol = n, nrow = n)\n    for (i in 1:n) {\n      M[i,sol[i]] = 1\n    }\n    return(M)\n  })\n  \n  # Se retornan las matrices solución\n  return(soluciones)\n}\n\nComparemos lo obtenido con la opción 1.\n\nr2 = opcion2(5)\n## [1] \"All solutions:  10\"\nr2[1]\n## [[1]]\n##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    0    0    0    0\n## [2,]    0    0    1    0    0\n## [3,]    0    0    0    0    1\n## [4,]    0    1    0    0    0\n## [5,]    0    0    0    1    0\n\nComo se puede apreciar, el resultado dado por la opción 1. Esto se debe a que los caminos se recorren en “orden”, a esto se le llama solución lexicográfica."
  },
  {
    "objectID": "principal/posts/2021-09-19-problema+de+las+n+reinas/index.html#comentarios",
    "href": "principal/posts/2021-09-19-problema+de+las+n+reinas/index.html#comentarios",
    "title": "Problema de las n - reinas",
    "section": "Comentarios",
    "text": "Comentarios\nLos códigos son simplemente ejemplos, ya que para la primera opción es posible ocupar los mismos criterios que en la segunda. Es por esto, que la idea es proporcionar distintas alternativas, de tal manera que puedan aplicar y entender sus propias propuestas."
  },
  {
    "objectID": "principal/posts/2024-01-30-Rpackage/index.html",
    "href": "principal/posts/2024-01-30-Rpackage/index.html",
    "title": "Elaborar paquetes en R utilizando el paquete devtools",
    "section": "",
    "text": "A continuación, se mencionan los principales aspectos que personalmente considero necesarios para la elaboración de un paquete con R, los cuales, están tomados del libro Paquetes R (2e) escrito por Hadley Wickham y Jennifer Bryan. En particular, se presenta un resumen del primer capítulo “The Whole Game” (se recomienda replicar el ejemplo desarrollado en este capítulo) y algunas otras secciones.\nLa creación de paquetes en R está asistida por diversos paquetes que facilitan el desarrollo, entre los cuales usaremos devtools, usethis, roxygen2 y sinew. Además, se recomienda trabajar con R Studio, ya que, varios de los comandos se ejecutan desde la barra de herramientas."
  },
  {
    "objectID": "principal/posts/2024-01-30-Rpackage/index.html#funciones",
    "href": "principal/posts/2024-01-30-Rpackage/index.html#funciones",
    "title": "Elaborar paquetes en R utilizando el paquete devtools",
    "section": "3.1 Funciones",
    "text": "3.1 Funciones\nPara añadir documentación de las funciones se utiliza el paquete roxygen2. Debe ubicarse dentro de la función, luego se utiliza la opción “Insert Roxygen Skeleton” desplegada al presionar en la varita que está en la barra de herramientas del archivo de código. Luego, ejecutando el comando devtools::document() se genera la documentación en formato .Rd en la carpeta man/. Esta carpeta se creará en caso de que no exista previamente.\nUn ejemplo de la documentación generada en una función es la siguiente.\n#' Title\n#'\n#' @return\n#' @export\n#'\n#' @examples\nejemplo = function(){\n  print(\"Hola mundo\")\n}\nLos argumentos que se generan no son los únicos que se pueden utilizar, para saber que ingresar en cada uno de ellos y, cuales otros se pueden implementar, consulte la documentación.\nEn particular, uno de los argumentos más importantes es #' @importFrom, este argumento requiere que se ingresen las funciones utilizadas de paquetes (no todas las funciones necesariamente deben ingresarse) actualizando el archivo NAMESPACE, incluso, si olvidas rellenar este apartado, al momento de ejecutar la revisión con la opción check de la pestaña Build (mirar sección de Funcionamiento), te indicará la funciones que faltan por importar.\n#' Title\n#'\n#' @param x\n#' @param y\n#'\n#' @return\n#' @export\n#'\n#' @importFrom graphics points\nejemplo = function(x,y){\n  plot(x,y)\n  points(y,x)\n}\nExiste una segunda forma de hacerlo, y es usando el comando usethis::use_import_from(\"nombre_del_paquete\", \"función\"), esto actualizará tanto el NAMESPACE como el archivo R/nombre_del_paquete-package.R (detalle de este archivo en la sección de Viñetas), el cual, contiene también las funciones importada.\nAmbos métodos son factibles para importar las funciones; si se desea, se pueden usar ambos sin preocuparse por la existencia de conflictos."
  },
  {
    "objectID": "principal/posts/2024-01-30-Rpackage/index.html#renombrar-funciones",
    "href": "principal/posts/2024-01-30-Rpackage/index.html#renombrar-funciones",
    "title": "Elaborar paquetes en R utilizando el paquete devtools",
    "section": "3.2 Renombrar funciones",
    "text": "3.2 Renombrar funciones\nSi se desea cambiar el nombre de una función podemos realizarlo con el comando usethis::rename_files(\"nombre_antiguo\", \"nombre_nuevo\"), esto cambiará el nombre del archivo test asociado a la función. Luego, es necesario que se ejecute nuevamente el comando document() para actualizar la viñeta de documentación y el NAMESPACE."
  },
  {
    "objectID": "principal/posts/2024-01-30-Rpackage/index.html#bases-de-datos",
    "href": "principal/posts/2024-01-30-Rpackage/index.html#bases-de-datos",
    "title": "Elaborar paquetes en R utilizando el paquete devtools",
    "section": "3.3 Bases de datos",
    "text": "3.3 Bases de datos\nEs necesario documentar las bases de datos que se encuentran en la carpeta data/, para ello se recomienda crear el archivo R/data.R. Luego, mediante el paquete y comando sinew::makeOxygen(\"nombre_base_de_datos\", add_fields = \"source\") se imprime en consola el esqueleto de la documentación de la base de datos en formato roxygen2. En necesario que la base de datos se encuentre previamente cargada en el ambiente.\nNo olvide ejecutar el comando devtools::document() para crear la viñeta correspondiente."
  },
  {
    "objectID": "principal/posts/2024-01-30-Rpackage/index.html#viñetas-opcionales",
    "href": "principal/posts/2024-01-30-Rpackage/index.html#viñetas-opcionales",
    "title": "Elaborar paquetes en R utilizando el paquete devtools",
    "section": "3.4 Viñetas opcionales",
    "text": "3.4 Viñetas opcionales\nLas viñetas son pestañas extras que tienen los paquetes que sirven en caso de que la documentación sea extensa, o si se desea explicar algo en profundidad. Este tipo de archivo no es imprescindible en el paquete.\nPara crear una viñeta se debe utilizar el comando usethis::use_vignette(\"nombre_de_la_viñeta_a_crear). Automáticamente, se crea la carpeta de viñetas vignettes. Para poder observar estas viñetas, lo primero es instalar el paquete, y luego construir las viñetas mediante el comando devtools::install(build_vignettes = TRUE). Sin embargo, para poder instalar las viñetas desde github al momento de instalar el paquete, se deberá ejecutar devtools::install_github(\"ruta_github\", build_vignettes = TRUE).\nUna viñeta especial y que es totalmente opcional es la de resumen del paquete, y es la que se visualiza al ejecutar help(\"nombre_del_paquete\"), para ello, se debe usar el comando usethis::use_package_doc(), lo que genera un archivo R/nombre_del_paquete-package.R, el cual, puede ser editado/usado para actualizar las funciones que se importan de otros paquetes. Luego, se debe ejecutar devtools::document(), lo que permite tomar parte de la información de archivo DESCRIPTION para generar una viñeta del paquete (el logo se incrusta automáticamente si ya está creado de antemano, sino, al ejecutar devtools::document() se añadirá)."
  },
  {
    "objectID": "principal/posts/2024-01-30-Rpackage/index.html#ubuntu-22.04.3-lts",
    "href": "principal/posts/2024-01-30-Rpackage/index.html#ubuntu-22.04.3-lts",
    "title": "Elaborar paquetes en R utilizando el paquete devtools",
    "section": "7.1 Ubuntu (22.04.3 LTS +)",
    "text": "7.1 Ubuntu (22.04.3 LTS +)\n\nCaracteres ASCII: es posible recibir la nota de que algunas de las bases de datos (de la carpeta data) no tienen únicamente caracteres ASCII, lo cual, viene acompañado de un mensaje en el que se indica que el paquete qpdf es necesario para reducir el tamaño de los PDF. Para solucionar este problema ejecute sudo apt install qpdf."
  },
  {
    "objectID": "principal/about.html",
    "href": "principal/about.html",
    "title": "Daniel Franzani",
    "section": "",
    "text": "Mi nombre es Daniel Franzani. Puedes saber más sobre mi experiencia profesional y formación en la página de inicio. Este blog trata sobre el uso de R en estadística, redes neuronales poco profundas, librerías, entre otros temas. La idea es que los temas expuestos sean de ayuda a estudiantes en diversos niveles, por lo mismo, siéntase libre de dejar sus comentarios en cada uno de las publicaciones (al final de cada una puede encontrar el apartado correspondiente, cabe mencionar, que es necesario iniciar sesión en Github) o revisar directamente el repositorio de comentarios generales."
  },
  {
    "objectID": "principal/about.html#el-sitio-web",
    "href": "principal/about.html#el-sitio-web",
    "title": "Daniel Franzani",
    "section": "El sitio web",
    "text": "El sitio web\nEste sitio está creado con Quarto, se utilizó la plantilla de sitio web, y dentro de ella se incrustó un blog. En este último, las publicaciones están ordenadas por fecha de manera descendente. Las casillas de comentario en cada publicación están gestionadas mediante utterances."
  },
  {
    "objectID": "principal/about.html#trabajos",
    "href": "principal/about.html#trabajos",
    "title": "Daniel Franzani",
    "section": "Trabajos",
    "text": "Trabajos\nAlgunos de los proyectos en los que he trabajado últimamente son:\n\nElaboración de un modelo de alerta para el delito de portonazos (robo de auto en la entrada de un domicilio), mediante YOLOv5 y heurísticas de clasificación.\nAplicación web para socialización de un modelo lineal generalizado enfocado en la predicción de deserción estudiantil. La aplicación esta construida con R Shiny.\nMtrGLM: Esta librería R (pública) está diseñada para obtener las métricas básicas de un Modelo Lineal Generalizado con variable respuesta dicotómica, las cuales están relacionadas con la matriz de confusión. Además, incluye gráficos asociados a la curvas de ROC, KS, Ganancia y PR.\nTablyzer: Esta librería R (privada, en desarrollo) está orientada a mejorar el proceso de cruce de bases de datos. La finalidad es poder reportar al usuario las inconsistencias presentes en el cruce de bases de datos."
  },
  {
    "objectID": "principal/home.html",
    "href": "principal/home.html",
    "title": "Daniel Franzani",
    "section": "",
    "text": "Actualmente soy docente y coordino los cursos de estadística en la Facultad de Administración y Economía de la Universidad Diego Portales. Obtuve mi grado de Magíster en Estadística y Magíster en Inteligencia Artificial en la Pontificia Universidad Católica de Chile y la Universidad Adolfo Ibañez respectivamente. En estos momentos, divido mi tiempo en el desarrollo de sitios web estáticos para el apoyo de la docencia, y en el desarrollo de librerías de R para la ciencia de datos (por diversión). Soy admirador de Github, GNU-Linux (Ubuntu) y RStudio. Este sitio web está creado con la finalidad de socializar conocimiento relacionado al uso de R en estadística y otras posibles temáticas."
  },
  {
    "objectID": "principal/blog.html",
    "href": "principal/blog.html",
    "title": "Posts",
    "section": "",
    "text": "Fecha\n\n\nTítulo\n\n\n\n\n\n\n15/6/24\n\n\nElaborar paquetes en R utilizando el paquete devtools\n\n\n\n\n19/9/21\n\n\nProblema de las n - reinas\n\n\n\n\n\nNo hay resultados"
  }
]